/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
        public TreeNode buildTree(int[] inorder, int[] postorder) {
    Map<Integer, Integer> map = new HashMap<>();
    for (int i = 0; i < inorder.length; i++) {
        map.put(inorder[i], i);
    }
    return buildTreeHelper(inorder, 0, inorder.length - 1, postorder, 0, postorder.length - 1, map);
}

private TreeNode buildTreeHelper(int[] inorder, int inStart, int inEnd, int[] postorder, int postStart, int postEnd, Map<Integer, Integer> map) {
    if (inStart > inEnd) {
        return null;
    }
    int rootVal = postorder[postEnd];
    int rootIndex = map.get(rootVal);
    int rightSubtreeSize = inEnd - rootIndex;
    TreeNode root = new TreeNode(rootVal);
    if (inStart == inEnd && postStart == postEnd) {
        return root;
    }
    root.right = buildTreeHelper(inorder, rootIndex + 1, inEnd, postorder, postEnd - rightSubtreeSize, postEnd - 1, map);
    root.left = buildTreeHelper(inorder, inStart, rootIndex - 1, postorder, postStart, postEnd - rightSubtreeSize - 1, map);
    return root;
}

        
    }
